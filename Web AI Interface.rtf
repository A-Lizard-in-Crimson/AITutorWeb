{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 AppleColorEmoji;\f2\fnil\fcharset0 LucidaGrande;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs22 \cf2 \up0 \nosupersub \ulnone <!DOCTYPE html>\
<html lang="en">\
<head>\
    <meta charset="UTF-8">\
    <meta name="viewport" content="width=device-width, initial-scale=1.0">\
    <title>AI Tutor - Digital Binder</title>\
    <style>\
        * \{\
            margin: 0;\
            padding: 0;\
            box-sizing: border-box;\
        \}\
        \
        body \{\
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;\
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);\
            min-height: 100vh;\
            color: #333;\
        \}\
        \
        .container \{\
            max-width: 1400px;\
            margin: 0 auto;\
            padding: 20px;\
        \}\
        \
        header \{\
            background: rgba(255, 255, 255, 0.95);\
            backdrop-filter: blur(10px);\
            border-radius: 20px;\
            padding: 30px;\
            margin-bottom: 30px;\
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\
        \}\
        \
        h1 \{\
            color: #2a5298;\
            font-size: 2.5em;\
            margin-bottom: 10px;\
        \}\
        \
        .tagline \{\
            color: #666;\
            font-size: 1.2em;\
        \}\
        \
        .main-grid \{\
            display: grid;\
            grid-template-columns: 1fr 2fr 1fr;\
            gap: 20px;\
            margin-bottom: 30px;\
        \}\
        \
        .panel \{\
            background: rgba(255, 255, 255, 0.95);\
            backdrop-filter: blur(10px);\
            border-radius: 15px;\
            padding: 25px;\
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);\
        \}\
        \
        .panel h2 \{\
            color: #2a5298;\
            margin-bottom: 20px;\
            font-size: 1.5em;\
        \}\
        \
        /* Left Panel - Quick Actions */\
        .quick-actions button \{\
            width: 100%;\
            padding: 12px 20px;\
            margin-bottom: 10px;\
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\
            color: white;\
            border: none;\
            border-radius: 10px;\
            font-size: 1em;\
            cursor: pointer;\
            transition: transform 0.2s;\
        \}\
        \
        .quick-actions button:hover \{\
            transform: translateY(-2px);\
        \}\
        \
        /* Center Panel - Chat Interface */\
        .chat-container \{\
            display: flex;\
            flex-direction: column;\
            height: 600px;\
        \}\
        \
        .chat-messages \{\
            flex: 1;\
            overflow-y: auto;\
            padding: 20px;\
            background: #f5f5f5;\
            border-radius: 10px;\
            margin-bottom: 20px;\
        \}\
        \
        .message \{\
            margin-bottom: 15px;\
            padding: 15px;\
            border-radius: 10px;\
            animation: fadeIn 0.3s ease-in;\
        \}\
        \
        .message.user \{\
            background: #e3f2fd;\
            margin-left: 20%;\
        \}\
        \
        .message.tutor \{\
            background: #f3e5f5;\
            margin-right: 20%;\
        \}\
        \
        .message.system \{\
            background: #fff3e0;\
            text-align: center;\
            font-style: italic;\
            color: #666;\
        \}\
        \
        .chat-input-container \{\
            display: flex;\
            gap: 10px;\
        \}\
        \
        .chat-input \{\
            flex: 1;\
            padding: 15px;\
            border: 2px solid #ddd;\
            border-radius: 10px;\
            font-size: 1em;\
            transition: border-color 0.3s;\
        \}\
        \
        .chat-input:focus \{\
            outline: none;\
            border-color: #667eea;\
        \}\
        \
        .send-button \{\
            padding: 15px 30px;\
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\
            color: white;\
            border: none;\
            border-radius: 10px;\
            font-size: 1em;\
            cursor: pointer;\
            transition: transform 0.2s;\
        \}\
        \
        .send-button:hover \{\
            transform: scale(1.05);\
        \}\
        \
        /* Right Panel - Context & Memory */\
        .memory-item \{\
            padding: 10px;\
            margin-bottom: 10px;\
            background: #f0f0f0;\
            border-radius: 8px;\
            font-size: 0.9em;\
        \}\
        \
        .memory-item .tag \{\
            display: inline-block;\
            padding: 3px 8px;\
            background: #667eea;\
            color: white;\
            border-radius: 5px;\
            font-size: 0.8em;\
            margin-right: 5px;\
        \}\
        \
        /* File Drop Zone */\
        .file-drop-zone \{\
            border: 3px dashed #ddd;\
            border-radius: 10px;\
            padding: 30px;\
            text-align: center;\
            margin-top: 20px;\
            transition: all 0.3s;\
        \}\
        \
        .file-drop-zone.dragover \{\
            border-color: #667eea;\
            background: #f0f3ff;\
        \}\
        \
        /* ADHD Support Features */\
        .adhd-toolbar \{\
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\
            color: white;\
            padding: 15px;\
            border-radius: 10px;\
            margin-bottom: 20px;\
            display: flex;\
            justify-content: space-between;\
            align-items: center;\
        \}\
        \
        .mood-indicator \{\
            display: flex;\
            gap: 10px;\
            align-items: center;\
        \}\
        \
        .mood-emoji \{\
            font-size: 2em;\
            cursor: pointer;\
            transition: transform 0.2s;\
        \}\
        \
        .mood-emoji:hover \{\
            transform: scale(1.2);\
        \}\
        \
        @keyframes fadeIn \{\
            from \{ opacity: 0; transform: translateY(10px); \}\
            to \{ opacity: 1; transform: translateY(0); \}\
        \}\
        \
        /* Responsive Design */\
        @media (max-width: 1024px) \{\
            .main-grid \{\
                grid-template-columns: 1fr;\
            \}\
        \}\
    </style>\
</head>\
<body>\
    <div class="container">\
        <header>\
            <h1>AI Tutor & Digital Binder</h1>\
            <p class="tagline">Your ADHD-friendly academic companion</p>\
        </header>\
        \
        <!-- ADHD Support Toolbar -->\
        <div class="adhd-toolbar">\
            <div class="mood-indicator">\
                <span>How are you feeling?</span>\
                <span class="mood-emoji" onclick="setMood('
\f1 \uc0\u55357 \u56842 
\f0 ')">
\f1 \uc0\u55357 \u56842 
\f0 </span>\
                <span class="mood-emoji" onclick="setMood('
\f1 \uc0\u55357 \u56848 
\f0 ')">
\f1 \uc0\u55357 \u56848 
\f0 </span>\
                <span class="mood-emoji" onclick="setMood('
\f1 \uc0\u55357 \u56852 
\f0 ')">
\f1 \uc0\u55357 \u56852 
\f0 </span>\
                <span class="mood-emoji" onclick="setMood('
\f1 \uc0\u55357 \u56868 
\f0 ')">
\f1 \uc0\u55357 \u56868 
\f0 </span>\
            </div>\
            <div id="current-focus">\
                Current Focus: <strong>Getting Started</strong>\
            </div>\
        </div>\
        \
        <div class="main-grid">\
            <!-- Left Panel: Quick Actions -->\
            <div class="panel quick-actions">\
                <h2>Quick Actions</h2>\
                <button onclick="capturePhoto()">
\f1 \uc0\u55357 \u56568 
\f0  Capture Whiteboard</button>\
                <button onclick="checkAssignments()">
\f1 \uc0\u55357 \u56538 
\f0  Check Assignments</button>\
                <button onclick="generateStudyGuide()">
\f1 \uc0\u55357 \u56541 
\f0  Create Study Guide</button>\
                <button onclick="dailyChecklist()">
\f1 \uc0\u9989 
\f0  Daily Checklist</button>\
                <button onclick="askQuestion()">
\f1 \uc0\u10067 
\f0  Ask Question</button>\
                <button onclick="reviewNotes()">
\f1 \uc0\u55357 \u56534 
\f0  Review Notes</button>\
            </div>\
            \
            <!-- Center Panel: Chat Interface -->\
            <div class="panel">\
                <h2>Tutor Chat</h2>\
                <div class="chat-container">\
                    <div class="chat-messages" id="chatMessages">\
                        <div class="message system">\
                            Welcome! I'm your AI Tutor. I'm here to guide you through your studies without giving you the answers. How can I help you today?\
                        </div>\
                    </div>\
                    <div class="chat-input-container">\
                        <input \
                            type="text" \
                            class="chat-input" \
                            id="chatInput" \
                            placeholder="Type your message here..."\
                            onkeypress="handleKeyPress(event)"\
                        >\
                        <button class="send-button" onclick="sendMessage()">Send</button>\
                    </div>\
                </div>\
                \
                <!-- File Drop Zone -->\
                <div class="file-drop-zone" id="dropZone">\
                    <p>
\f1 \uc0\u55357 \u56526 
\f0  Drag and drop files here or click to upload</p>\
                    <p style="font-size: 0.9em; color: #666; margin-top: 10px;">\
                        Supports: Photos, PDFs, Documents\
                    </p>\
                </div>\
            </div>\
            \
            <!-- Right Panel: Context & Memory -->\
            <div class="panel">\
                <h2>Active Context</h2>\
                <div id="memoryDisplay">\
                    <div class="memory-item">\
                        <span class="tag">META</span>\
                        <strong>Session Started</strong><br>\
                        <small>Distributed memory system active</small>\
                    </div>\
                    <div class="memory-item">\
                        <span class="tag">FOCUS</span>\
                        <strong>Current Project</strong><br>\
                        <small>AI Tutor Web Interface</small>\
                    </div>\
                </div>\
                \
                <h2 style="margin-top: 30px;">Recent Files</h2>\
                <div id="recentFiles">\
                    <div class="memory-item">\
                        <small>No files uploaded yet</small>\
                    </div>\
                </div>\
            </div>\
        </div>\
    </div>\
    \
    <script>\
        // Initialize distributed memory connection\
        let memoryState = \{\
            session: `WEB-$\{Date.now()\}`,\
            mood: '
\f1 \uc0\u55357 \u56842 
\f0 ',\
            focus: 'Getting Started',\
            messages: [],\
            files: []\
        \};\
        \
        // Chat functionality\
        function sendMessage() \{\
            const input = document.getElementById('chatInput');\
            const message = input.value.trim();\
            if (!message) return;\
            \
            addMessage(message, 'user');\
            input.value = '';\
            \
            // Simulate tutor response (in real implementation, this would call the API)\
            setTimeout(() => \{\
                const response = generateTutorResponse(message);\
                addMessage(response, 'tutor');\
                updateMemoryState('message', \{ user: message, tutor: response \});\
            \}, 1000);\
        \}\
        \
        function handleKeyPress(event) \{\
            if (event.key === 'Enter') \{\
                sendMessage();\
            \}\
        \}\
        \
        function addMessage(text, type) \{\
            const messagesDiv = document.getElementById('chatMessages');\
            const messageDiv = document.createElement('div');\
            messageDiv.className = `message $\{type\}`;\
            messageDiv.textContent = text;\
            messagesDiv.appendChild(messageDiv);\
            messagesDiv.scrollTop = messagesDiv.scrollHeight;\
        \}\
        \
        function generateTutorResponse(message) \{\
            // Ethical tutoring responses\
            const lowerMessage = message.toLowerCase();\
            \
            if (lowerMessage.includes('answer') || lowerMessage.includes('solve')) \{\
                return "I can't give you the answer directly, but I can help guide you. What part are you finding challenging?";\
            \} else if (lowerMessage.includes('help')) \{\
                return "I'm here to help! Can you show me what you've tried so far?";\
            \} else if (lowerMessage.includes('homework')) \{\
                return "Let's work through your homework together. What subject is it for?";\
            \} else \{\
                return "That's a good question. Let me help you think through this step by step.";\
            \}\
        \}\
        \
        // Quick action functions\
        function capturePhoto() \{\
            addMessage("Ready to capture a whiteboard photo. Please use the file upload area below.", 'system');\
            document.getElementById('dropZone').style.border = '3px solid #667eea';\
        \}\
        \
        function checkAssignments() \{\
            addMessage("Checking your assignments...", 'system');\
            updateMemoryState('action', 'check_assignments');\
        \}\
        \
        function generateStudyGuide() \{\
            addMessage("What subject would you like a study guide for?", 'tutor');\
            updateMemoryState('action', 'generate_study_guide');\
        \}\
        \
        function dailyChecklist() \{\
            addMessage("Generating your daily checklist...", 'system');\
            setTimeout(() => \{\
                addMessage("Daily Checklist:\\n
\f2 \uc0\u10003 
\f0  Check backpack\\n
\f2 \uc0\u10003 
\f0  Review calendar\\n
\f2 \uc0\u10003 
\f0  Complete morning routine\\n
\f2 \uc0\u10003 
\f0  Prepare materials for each class", 'tutor');\
            \}, 500);\
        \}\
        \
        function askQuestion() \{\
            document.getElementById('chatInput').focus();\
            addMessage("What would you like to know?", 'tutor');\
        \}\
        \
        function reviewNotes() \{\
            addMessage("Which subject's notes would you like to review?", 'tutor');\
            updateMemoryState('action', 'review_notes');\
        \}\
        \
        // Mood tracking\
        function setMood(emoji) \{\
            memoryState.mood = emoji;\
            addMessage(`Mood updated to $\{emoji\}. I'll adjust my responses accordingly.`, 'system');\
            updateMemoryState('mood', emoji);\
        \}\
        \
        // Memory state management\
        function updateMemoryState(type, data) \{\
            // In real implementation, this would sync with external memory\
            memoryState[type] = data;\
            memoryState.lastUpdated = new Date().toISOString();\
            \
            // Update display\
            const memoryDisplay = document.getElementById('memoryDisplay');\
            const newItem = document.createElement('div');\
            newItem.className = 'memory-item';\
            newItem.innerHTML = `\
                <span class="tag">UPDATE</span>\
                <strong>$\{type\}</strong><br>\
                <small>$\{JSON.stringify(data).substring(0, 50)\}...</small>\
            `;\
            memoryDisplay.insertBefore(newItem, memoryDisplay.firstChild);\
            \
            // Keep only last 5 items\
            while (memoryDisplay.children.length > 5) \{\
                memoryDisplay.removeChild(memoryDisplay.lastChild);\
            \}\
        \}\
        \
        // File handling\
        const dropZone = document.getElementById('dropZone');\
        \
        dropZone.addEventListener('dragover', (e) => \{\
            e.preventDefault();\
            dropZone.classList.add('dragover');\
        \});\
        \
        dropZone.addEventListener('dragleave', () => \{\
            dropZone.classList.remove('dragover');\
        \});\
        \
        dropZone.addEventListener('drop', (e) => \{\
            e.preventDefault();\
            dropZone.classList.remove('dragover');\
            \
            const files = Array.from(e.dataTransfer.files);\
            files.forEach(file => \{\
                addMessage(`Uploaded: $\{file.name\}`, 'system');\
                memoryState.files.push(\{\
                    name: file.name,\
                    type: file.type,\
                    size: file.size,\
                    timestamp: new Date().toISOString()\
                \});\
                \
                // Update recent files display\
                const recentFiles = document.getElementById('recentFiles');\
                recentFiles.innerHTML = memoryState.files.map(f => `\
                    <div class="memory-item">\
                        <strong>$\{f.name\}</strong><br>\
                        <small>$\{(f.size / 1024).toFixed(1)\} KB</small>\
                    </div>\
                `).join('');\
            \});\
        \});\
        \
        dropZone.addEventListener('click', () => \{\
            const input = document.createElement('input');\
            input.type = 'file';\
            input.multiple = true;\
            input.accept = 'image/*,.pdf,.doc,.docx';\
            input.onchange = (e) => \{\
                const files = Array.from(e.target.files);\
                const dropEvent = new DragEvent('drop', \{\
                    dataTransfer: new DataTransfer()\
                \});\
                files.forEach(file => dropEvent.dataTransfer.items.add(file));\
                dropZone.dispatchEvent(dropEvent);\
            \};\
            input.click();\
        \});\
        \
        // Initialize\
        addMessage("Hello! I'm ready to help you with your studies. What would you like to work on today?", 'tutor');\
    </script>\
</body>\
</html>}